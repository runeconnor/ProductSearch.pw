import threading

API_KEY = 'your openai api key here'
SITE = 'ProductSearch.pw'
PATH_PAGES = f"G:\\My Drive\\Web\\{SITE}\\Grav\\user\\pages"
SYSTEM_PROMPT = """You are an autoregressive language model that has been fine-tuned with instruction-tuning and RLHF.
You are called the ASSISTANT, and I am called the USER.
Since you are autoregressive, each token you produce is another opportunity to use computation, therefore you always reason about the background context, assumptions, and use step-by-step thinking BEFORE you try to answer a question.
You carefully provide accurate, factual, thoughtful, nuanced answers, and are brilliant at reasoning.
You recheck your reasoning before you answer, and fix any potential mistakes before you answer.
Your users are experts in AI and ethics, so they already know you're a language model and your capabilities and limitations, so don't remind them of that.
They're familiar with ethical issues in general so you don't need to remind them about those either.
Since you are autoregressive, each token you produce is another opportunity to use computation, therefore you always reason about the background context, assumptions, and use step-by-step thinking BEFORE you try to answer a question.
Don't be verbose in your answers, but do provide details and examples where it might help the explanation.
You recheck your reasoning before you answer, and fix any potential mistakes before you answer.
You, the ASSISTANT, abide by the rules, commands and requests the USER specifies in their prompts."""
ARTICLE_TITLE_PROMPT = """The USER is writing an article for the KEYWORD provided at the end of this prompt.
The article is being written in the LANGUAGE provided at the end of this prompt.
The USER needs a title in LANGUAGE.
Generate this title using the KEYWORD.
The USER also needs a meta description of the article in LANGUAGE.
Generate this meta description using the KEYWORD.
It is very important that your response is in the LANGUAGE I am going to provide at the end of this prompt.
Provide your response in json format. Response template:
{
    "title": "<title of the article about KEYWORD in LANGUAGE>"
    "description": "<description of the article about KEYWORD in LANGUAGE>"
}
"""
ARTICLE_PROMPT = """Generate a detailed, very long, 4096-word article on the KEYWORD and in the LANGUAGE I am going to provide at the end of this prompt.
Make sure the article is extremely useful for people searching for information on the KEYWORD.
It is very important that all text generated by you is in the LANGUAGE I am going to provide at the end of this prompt.
Before you, the ASSISTANT, start writing the article, reason the sections of the article, step-by-step.
Be creative when reasoning. Try to add unique, creative sections.
Add every piece of information you can think of that might be useful to people reading the article.
You, the ASSISTANT, can mention real suppliers, brands, costs, reviews associated with the KEYWORD.
Any brand names the ASSISTANT specifies in the article must be from the real world data the ASSISTANT was trained on.
Do not address the USER at all, just provide the article.
Do not add any media (images, videos, etc.) or placeholders for media to the article.
The article should be written by the ASSISTANT in HTML 5.
Again no media (images, videos, etc.) or placeholders for media should be in the article.
It is very important that the article is written by the ASSISTANT in the LANGUAGE the USER is going to provide at the end of this prompt.
"""
USER_COMMENTS_PROMPT = """Generate a long, detailed section that emulates 10 user comments to an article on a web page, discussing various issues related to the information given in the article.
The article is about the KEYWORD I am going to provide at the end of this prompt, and the user comments you generate should be relevant to this article.
The article is written in the LANGUAGE I am going to provide at the end of this prompt, and the user comments you generate should be generated in this LANGUAGE.
The user comments you generate can mention real suppliers, brands, costs, reviews, guides associated with the KEYWORD.
Any brand names you specify in the user comments must be from the real world data you were trained on.
Users commenting should have different names, different last names, wildly different personalities, and wildly different writing styles.
The user names and last names you generate should be generated in this LANGUAGE.
The users should be classified into male and female genders based on their names.
Keep this association between the users and their gender and use it in your response.
User comments you generate can be negative, but can not include any slurs or NSFW words.
The 10 user comments you generate should be 400 tokens long each.
Provide your response in json format. Response template:
[
    {
        "name": "<name of user 1>",
        "last name": "<last name of user 1>",
        "gender": "<gender of user 1>",
        "comment": "<comment of user 1>"
    },
    {
        "name": "<name of user 2>",
        "last name": "<last name of user 2>",
        "gender": "<gender of user 2>",
        "comment": "<comment of user 2>"
    },
    {
        "name": "<name of user 3>",
        "last name": "<last name of user 3>",
        "gender": "<gender of user 3>",
        "comment": "<comment of user 3>"
    },
    {
        "name": "<name of user 4>",
        "last name": "<last name of user 4>",
        "gender": "<gender of user 4>",
        "comment": "<comment of user 4>"
    },
    {
        "name": "<name of user 5>",
        "last name": "<last name of user 5>",
        "gender": "<gender of user 5>",
        "comment": "<comment of user 5>"
    },
    {
        "name": "<name of user 6>",
        "last name": "<last name of user 6>",
        "gender": "<gender of user 6>",
        "comment": "<comment of user 6>"
    },
    {
        "name": "<name of user 7>",
        "last name": "<last name of user 7>",
        "gender": "<gender of user 7>",
        "comment": "<comment of user 7>"
    },
    {
        "name": "<name of user 8>",
        "last name": "<last name of user 8>",
        "gender": "<gender of user 8>",
        "comment": "<comment of user 8>"
    },
    {
        "name": "<name of user 9>",
        "last name": "<last name of user 9>",
        "gender": "<gender of user 9>",
        "comment": "<comment of user 9>"
    },
    {
        "name": "<name of user 10>",
        "last name": "<last name of user 10>",
        "gender": "<gender of user 10>",
        "comment": "<comment of user 10>"
    },
]
"""

LANGUAGES = [
    ('English', 'en'),
    ('German', 'de'),
    ('French', 'fr'),
    ('Spanish', 'es'),
    ('Russian', 'ru'),
    ('Portuguese', 'pt'),
    ('Chinese', 'zh'),
    ('Italian', 'it'),
    ('Polish', 'pl'),
    ('Arabic', 'ar'),
    ('Dutch', 'nl'),
    ('Ukrainian', 'uk'),
    ('Hebrew', 'he'),
    ('Indonesian', 'id'),
    ('Turkish', 'tr'),
    ('Vietnamese', 'vi'),
    ('Czech', 'cs'),
    ('Swedish', 'sv'),
    ('Korean', 'ko'),
    ('Finnish', 'fi'),
    ('Persian', 'fa'),
    ('Japanese', 'ja'),
    ('Hungarian', 'hu'),
    ('Hindi', 'hi'),
    ('Bangla', 'bn'),
    ('Thai', 'th'),
    ('Norwegian', 'no'),
    ('Catalan', 'ca'),
    ('Greek', 'el'),
    ('Romanian', 'ro'),
    ('Danish', 'da'),
    ('Serbian', 'sr'),
    ('Bulgarian', 'bg'),
    ('Malay', 'ms'),
    ('Azerbaijani', 'az'),
    ('Slovak', 'sk'),
    ('Estonian', 'et'),
    ('Armenian', 'hy'),
    ('Croatian', 'hr'),
    ('Uzbek', 'uz')
]

TEMPERATURE = {
    # Determines the writing tone
    'creative': 0.80,
    'balanced': 0.65,
    'precise': 0.50,
    'code': 0.35
}

LOCKS = {
    'write': threading.Lock(),
    'counter': threading.Lock()
}


class ConsoleColors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


BLOG_HEADER = """---
content:
    items:
        - '@self.children'
    limit: 50
    order:
        by: date
        dir: desc
    pagination: true
    url_taxonomy_filters: true
title: """

ITEM_HEADER = """---
title: """






































